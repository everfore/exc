// Code generated by go-bindata.
// sources:
// tpl/data.yaml
// tpl/tpl.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplDataYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4d\x2c\xb0\xe2\x52\x50\xf0\x4b\xcc\x4d\x2d\xb6\x52\xe0\x52\x50\x50\x50\xd0\x85\x50\x0a\x0a\x6e\x99\x45\xc5\x25\x56\x0a\xc1\x99\xb9\x25\x19\x50\xa1\xe0\xd4\xe4\xfc\xbc\x14\x2b\x05\xaf\xfc\x8c\x3c\x92\x14\x1b\x91\xa4\xda\x98\x2b\xb1\xa8\x08\xe4\x2e\x5d\x05\x43\x30\x69\x04\x26\x8d\xb9\x00\x01\x00\x00\xff\xff\xfa\x80\x42\x91\xaf\x00\x00\x00")

func tplDataYamlBytes() ([]byte, error) {
	return bindataRead(
		_tplDataYaml,
		"tpl/data.yaml",
	)
}

func tplDataYaml() (*asset, error) {
	bytes, err := tplDataYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/data.yaml", size: 175, mode: os.FileMode(420), modTime: time.Unix(1513073212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x0f\x82\x30\x10\x85\x67\xf8\x15\x17\xd2\x91\x10\xd1\xad\x09\x83\x8b\x9b\x93\xa3\x31\xa4\xc1\xc6\x56\xb0\x25\x07\xc1\xe1\x72\xff\xdd\x00\xa1\x82\x4e\xbd\x97\xbe\xf7\xbe\x47\x84\xca\x3d\x34\x88\x3a\x15\x03\xc8\x02\xb2\xb3\x6a\x99\xe3\x48\x57\xc6\x83\xd1\x4d\xe3\x53\x20\x12\x35\xb3\x24\x12\xc3\xf8\x15\x32\x93\x9a\x9d\x4e\xbd\xb4\x04\xa2\xec\x64\xb1\xeb\x99\xc7\xf3\xa2\x2b\xef\xee\x73\x42\x4f\xc7\xf2\xc6\xa1\xc2\x2e\xd8\x23\x62\xc0\x2a\xc4\x2b\x91\xb0\xcc\xb7\x05\xba\x4a\xbe\x6d\x6f\xfe\xfc\xdd\x08\x7f\x7a\xeb\x20\x83\x24\x4d\x98\xcb\xb2\x5c\x87\x1a\xef\x5b\xc8\x21\xdf\x41\x3e\xb5\x7d\xf5\xfe\x47\x1f\xb6\xfb\x64\xb1\xb5\x46\xf3\xb0\xde\x84\xf6\x4f\x00\x00\x00\xff\xff\xd6\x1d\xff\x70\x43\x01\x00\x00")

func tplTplTplBytes() ([]byte, error) {
	return bindataRead(
		_tplTplTpl,
		"tpl/tpl.tpl",
	)
}

func tplTplTpl() (*asset, error) {
	bytes, err := tplTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/tpl.tpl", size: 323, mode: os.FileMode(420), modTime: time.Unix(1513073212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/data.yaml": tplDataYaml,
	"tpl/tpl.tpl": tplTplTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"data.yaml": &bintree{tplDataYaml, map[string]*bintree{}},
		"tpl.tpl": &bintree{tplTplTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

